#!/usr/bin/env ruby

require_relative '../lib/piwigo_client'

require 'optparse'
require 'progress_bar'

# ----------------------------------------------------------------------

def convert_category(client, cat_name)
  categories = client.get_categories(false).map { |c| [c['id'], c] }.to_h
  matches = categories.keys.select { |id| categories[id]['name'].casecmp(cat_name).zero? }
  return matches.first if matches.count == 1

  $stderr.puts "Multiple matches found for category '#{cat_name}':"
  matches.each do |id|
    parent_ids = categories[id]['uppercats'].split(',').map(&:to_i)
    fullname = parent_ids.map { |cid| categories[cid]['name'] }.join('::')
    $stderr.puts "  (#{id}) #{fullname}"
  end
  exit 2
end

def get_file_list
  [].tap do |file_list|
    ARGV.each do |file|
      if file.start_with? '@'
        file_file = file[1..]
        file_list += File.readlines(file_file).map(&:chomp)
      else
        file_list << file
      end
    end
  end
end

def get_total_data_size(file_list)
  errors = []

  file_sizes = file_list.map do |filename|
    begin
      File.stat(filename).size
    rescue Errno::ENOENT
      errors << filename
    end
  end

  if errors.any?
    errors.each { |filename| $stderr.puts "Error: couldn't find file #{filename}" }
    exit 1
  end

  file_sizes.sum
end

# ----------------------------------------------------------------------

options = {
  'config' => '.piwigo.conf',
  'files' => []
}

parser = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] (file... | @list)"

  opts.separator ''
  docstring = 'Set location of JSON configuration file (default: .piwigo.conf).'
  opts.on('--config FILE', docstring) { |o| options['config'] = o }
  opts.on('-h', '--help', 'Prints this help') do
    puts opts
    exit
  end

  opts.separator ''
  opts.separator 'Connection options (required):'
  opts.on('-b', '--base_uri HOSTNAME', 'Hostname of Piwigo server') do |o|
    options['base_uri'] = o
  end
  opts.on('-u', '--username USERNAME', 'Username') { |u| options['username'] = u }
  opts.on('-p', '--password PASSWORD', 'Password') { |p| options['password'] = p }

  opts.separator ''
  opts.separator 'Image options:'
  docstring = 'Piwigo category to upload files into (required)'
  opts.on('-c', '--category ID', docstring) { |o| options['category'] = o }

  opts.separator ''
  opts.separator 'Specifying files:'
  opts.separator '  List one or more files on the command line after the arguments.'
  opts.separator '  If a filename starts with @, it will be treated as a newline-separated list of files.'
end

parser.parse!

if File.exist?(options['config'])
  begin
    options = JSON.parse(File.read(options['config'])).merge(options)
  rescue JSON::ParserError
    puts "Error reading #{options['config']}; is it a JSON file?"
  end
elsif options['config'] != '.piwigo.conf'
  warn "Config file #{options['config']} not found; proceeding without it"
end

options['files'] = get_file_list

%w[base_uri username password category].each do |key|
  unless options[key]
    $stderr.puts "Error: You must set a value for #{key}"
    puts parser
    exit
  end
end

unless options['files'].any?
  $stderr.puts "Error: You must specify one or more files to upload."
  puts parser
  exit
end

total_data = get_total_data_size(options['files'])

puts "Connecting to Piwigo at #{options['base_uri']} with username #{options['username']}"
client = PiwigoClient.new(base_uri: options['base_uri'], username: options['username'],
  password: options['password'])
client.login
client.check_session_status

if options['category'].is_a?(String)
  options['category'] = convert_category(client, options['category'])
end

pbar = ProgressBar.new(total_data, :bar, :percentage, :eta)
options['files'].each do |filename|
  pbar.puts "Uploading #{filename}"
  client.upload_file(filename, options['category_id'], pbar)
end

client.logout
